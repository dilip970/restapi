from django.db import models
import uuid

from django.db.models.deletion import CASCADE

import pharmacy

# Create your models here.
class Country(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    country_name        =   models.CharField(max_length=100)
    status              =   models.IntegerField(default=1)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)        

class State(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    country             =   models.ForeignKey(Country, on_delete=models.CASCADE)
    state_name          =   models.CharField(max_length=100)
    status              =   models.IntegerField(default=1)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class City(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    country             =   models.ForeignKey(Country, on_delete=models.CASCADE)
    state               =   models.ForeignKey(State, on_delete=models.CASCADE)
    city_name           =   models.CharField(max_length=100)
    status              =   models.IntegerField(default=1)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Locations(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    city                =   models.SlugField(max_length=100, unique = True, null=False)
    state               =   models.TextField(max_length=100)
    image               =   models.FileField(upload_to='locations', default=None)
    is_popular          =   models.BooleanField(default= False)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)


class SuperAdmin(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    email               =   models.CharField(max_length=100, unique=True)
    password            =   models.CharField(max_length=100)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Specializations(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    specialization      =   models.CharField(max_length=200, unique=True)
    image               =   models.FileField(upload_to='specializations', default=None)
    status              =   models.IntegerField(default=1)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Doctor(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    first_name          =   models.CharField(max_length=100)
    last_name           =   models.CharField(max_length=100)
    email               =   models.CharField(max_length=100, unique=True)
    password            =   models.CharField(max_length=100)
    phone               =   models.TextField(max_length=100 ,blank=True)
    address1            =   models.TextField(blank=True)
    address2            =   models.TextField(blank=True)
    city                =   models.ForeignKey(City, on_delete=models.CASCADE)
    state               =   models.ForeignKey(State, on_delete=models.CASCADE)
    country             =   models.ForeignKey(Country, on_delete=models.CASCADE)
    pincode             =   models.IntegerField(blank=True, null=True)
    experience          =   models.IntegerField()
    consultation_fee    =   models.IntegerField()
    profile_picture     =   models.FileField(upload_to='doctorprofiles', default=None)
    bio                 =   models.TextField(max_length = 500, blank=True)
    document            =   models.FileField(upload_to='doctordocuments', default=None)
    filled_details      =   models.BooleanField(default=False)
    location_id         =   models.ForeignKey(Locations, models.DO_NOTHING, default = None, null = True)
    specialization      =   models.ForeignKey(Specializations, on_delete=models.CASCADE)
    status              =   models.IntegerField(default=1)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)
    
class Doctor_Location(models.Model):
    id                  =   models.AutoField(primary_key=True)
    doctor              =   models.ForeignKey(Doctor, on_delete = models.CASCADE)
    Locations           =   models.ForeignKey(Locations, on_delete = models.CASCADE)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)
    
class Appoinment_Timings(models.Model):
    id                  =   models.AutoField(primary_key=True)
    doctor              =   models.ForeignKey(Doctor, on_delete=CASCADE)
    slot_date           =   models.TextField(null=True)
    slot_time           =   models.TextField(null=True)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class SubSpecializations(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    specialization      =   models.ForeignKey(Specializations, on_delete=models.CASCADE,null=True)
    subspecialization   =   models.CharField(max_length=200)
    image               =   models.FileField(upload_to='subspecializations', default=None)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Pharmacy(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    pharmacy_name       =   models.CharField(max_length=200)
    first_name          =   models.CharField(max_length=100)
    last_name           =   models.CharField(max_length=100)
    email               =   models.CharField(max_length=100, unique=True)
    password            =   models.CharField(max_length=100)
    phone               =   models.TextField(max_length=100 ,blank=True)
    address1            =   models.TextField(blank=True)
    address2            =   models.TextField(blank=True)
    city                =   models.TextField(blank=True)
    state               =   models.CharField(max_length = 150, blank=True)
    pincode             =   models.IntegerField(blank=True, null=True)
    pharmacy_image      =   models.FileField(upload_to='pharmacyimages', default=None)
    document            =   models.FileField(upload_to='pharmacydocuments', default=None)
    status              =   models.IntegerField(default=0)
    location_id         =   models.ForeignKey(Locations, models.DO_NOTHING, default = None, null = True)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Diagnostics(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    diagnostic_name     =   models.CharField(max_length=200)
    first_name          =   models.CharField(max_length=100)
    last_name           =   models.CharField(max_length=100)
    email               =   models.CharField(max_length=100, unique=True)
    password            =   models.CharField(max_length=100)
    phone               =   models.TextField(max_length=100 ,blank=True)
    address1            =   models.TextField(blank=True)
    address2            =   models.TextField(blank=True)
    city                =   models.TextField(blank=True)
    state               =   models.CharField(max_length = 150, blank=True)
    pincode             =   models.IntegerField(blank=True, null=True)
    diagnostics_image   =   models.FileField(upload_to='diagnosticsimage', default=None)
    document            =   models.FileField(upload_to='diagnosticsdocuments', default=None)
    status              =   models.IntegerField(default=0)
    location_id         =   models.ForeignKey(Locations, models.DO_NOTHING, default = None, null = True)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Tests(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4,editable=False)
    test_name           =   models.CharField(max_length=100)
    diagnostics_name    =   models.CharField(max_length=100)
    phone               =   models.TextField(max_length=100 ,blank=True)
    test_price          =   models.FloatField(null=True)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)


class Categories(models.Model):
    id                  =   models.AutoField(primary_key=True)
    category_name       =   models.CharField(max_length=100, unique=True)
    category_image      =   models.FileField(upload_to='categoryimages', default=None)
    status              =   models.IntegerField(default=1)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Product(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4,editable=False)
    category            =   models.ForeignKey(Categories, on_delete=models.CASCADE)
    pharmacy            =   models.ForeignKey(Pharmacy, on_delete=models.CASCADE, null=True)
    product_name        =   models.CharField(max_length=100, unique=True)
    product_code        =   models.CharField(max_length=100,null=True)
    product_image       =   models.FileField(upload_to='productimages',null=True)
    product_stock       =   models.IntegerField(null=True)
    product_price       =   models.FloatField(null=True)
    description         =   models.CharField(max_length=200, null=True)
    discount            =   models.IntegerField(null=True)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

#Patient Models Starts Here
#==========================
class Patient(models.Model):
    id                  =   models.AutoField(primary_key=True)
    uuid                =   models.UUIDField(default=uuid.uuid4, editable=False)
    first_name          =   models.CharField(max_length=100)
    last_name           =   models.CharField(max_length=100)
    email               =   models.CharField(max_length=100, unique=True)
    password            =   models.CharField(max_length=100)
    gender              =   models.CharField(max_length=10,null=True,blank=True)
    dob                 =   models.DateField('%m/%d/%Y',null=True)
    bloodgroup          =   models.CharField(max_length=10,null=True)
    houseno             =   models.TextField(max_length=30,null=True, blank=True)
    street              =   models.TextField(max_length=30, null=True)
    city                =   models.ForeignKey(City, on_delete=models.CASCADE, null=True)
    state               =   models.ForeignKey(State, on_delete=models.CASCADE, null=True)
    country             =   models.ForeignKey(Country, on_delete=models.CASCADE, null=True)
    pincode             =   models.CharField(max_length=6, null=True)
    phone               =   models.CharField(max_length=10, null=True, blank=True)
    language            =   models.CharField(max_length=20,null=True)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Patient_Appoinments(models.Model):
    id                  =   models.AutoField(primary_key=True)
    doctor              =   models.ForeignKey(Doctor,  on_delete=models.CASCADE)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    appointment_id      =   models.CharField(max_length=100, unique=True)
    doctor_name         =   models.CharField(max_length=100)
    slot_date           =   models.CharField(max_length=100, null=True)
    patient_name        =   models.CharField(max_length=100)
    phone               =   models.CharField(max_length=15)
    email               =   models.EmailField(max_length=100, null=False)
    gender              =   models.CharField(max_length=10, null=True)
    age                 =   models.IntegerField(null=True)
    medical_causes      =   models.CharField(max_length=100, null=True)
    medical_problem     =   models.CharField(max_length=200, null=True)
    clinic_name         =   models.CharField(max_length=100)
    fee                 =   models.FloatField(null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Patient_Orders(models.Model):
    id                  =   models.AutoField(primary_key=True)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    order_id            =   models.CharField(max_length=100, unique=True)
    order_date          =   models.DateTimeField(null=True)
    product_name        =   models.CharField(max_length=200)
    quantity            =   models.IntegerField(null=True)
    product_price       =   models.FloatField(null=True)
    order_total         =   models.FloatField(null=True)
    order_status        =   models.CharField(max_length=100, null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Patient_Lab_Appointments(models.Model):
    id                  =   models.AutoField(primary_key=True)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    patient_name        =   models.CharField(max_length=100)
    phone               =   models.CharField(max_length=15)
    email               =   models.EmailField(max_length=100, null=False)
    gender              =   models.CharField(max_length=10, null=True)
    age                 =   models.IntegerField(null=True)
    medical_problem     =   models.CharField(max_length=200)
    test_id             =   models.CharField(max_length=100, unique=True)
    test_name           =   models.CharField(max_length=100)
    test_price          =   models.FloatField(null=True)
    test_total          =   models.FloatField(null=True)
    test_status         =   models.CharField(max_length=100, null=True)
    doctor_name         =   models.CharField(max_length=100, null=True)
    lab_name            =   models.CharField(max_length=100, null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    status              =   models.IntegerField(default=0)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Patient_Tickets(models.Model):
    id                  =   models.AutoField(primary_key=True)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    ticket_id           =   models.CharField(max_length=100 , unique=True)
    title               =   models.CharField(max_length=100, null=True)
    description         =   models.CharField(max_length=500, null=True)
    ticket_status       =   models.CharField(max_length=100, null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Patient_Cart(models.Model):
    id                  =   models.AutoField(primary_key=True)
    patient             =   models.ForeignKey(Patient,on_delete=models.CASCADE)
    type                =   models.CharField(max_length=100)
    product_name        =   models.CharField(max_length=200)
    product_price       =   models.FloatField(null=True)
    product_qty         =   models.IntegerField(null=True)
    total_price         =   models.FloatField(null=True)
    test_name           =   models.CharField(max_length=100)
    test_price          =   models.FloatField(null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Patient_Reviews(models.Model):
    id                  =   models.AutoField(primary_key=True)
    doctor              =   models.ForeignKey(Doctor, on_delete=models.CASCADE)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    review_starts       =   models.IntegerField(null=True, default=0)
    review_text         =   models.TextField(null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)


class Pharmacy_Reviews(models.Model):
    id                  =   models.AutoField(primary_key=True)
    pharmacy            =   models.ForeignKey(Pharmacy, on_delete=models.CASCADE)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    review_starts       =   models.IntegerField(null=True, default=0)
    review_text         =   models.TextField(null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)

class Diagnostics_Reviews(models.Model):
    id                  =   models.AutoField(primary_key=True)
    diagnostics         =   models.ForeignKey(Diagnostics, on_delete=models.CASCADE)
    patient             =   models.ForeignKey(Patient, on_delete=models.CASCADE)
    review_starts       =   models.IntegerField(null=True, default=0)
    review_text         =   models.TextField(null=True)
    identifier          =   models.UUIDField(default=uuid.uuid4, editable=False)
    createdAt           =   models.DateTimeField(auto_now_add=True)
    updatedAt           =   models.DateTimeField(auto_now=True)